// the variable mixin takes a property and variable name 
// and an optional override to hide the fallback
@mixin v($prop, $var, $show-fall: true) {
  // get the property's map name(s)
  $map-name: map-get($props, $prop);
  $nest-name: null;
  $nest-map-name: null;
  $map: null;
  $var-fall: null;
  $var-output: null; // if a list, we need to go deeper
  @if type-of($map-name)==list {
    $nest-name: nth($map-name, 1);
    $nest-map-name: nth($map-name, 2);
  } // if it is a nested map
  @if $nest-name {
    // get the map from nested map-name
    $map: map-get($var-maps, $nest-name); // get the nested map
    $nest-map: map-get($map, $nest-map-name); // fallback value, get the var value from the nested map
    $var-fall: map-get($nest-map, $var); // our css4 variable output
    $var-output: var(--#{$nest-name}-#{$nest-map-name}-#{$var});
  }
  @else {
    // get the map from map name
    $map: map-get($var-maps, $map-name); // fallback value, grab the variable's value from the map
    $var-fall: map-get($map, $var); // our css4 variable output
    $var-output: var(--#{$map-name}-#{$var});
  } // if show fallback is not overridden to be null
  @if $show-fall {
    #{$prop}: $var-fall;
  } // css4 variable output
  #{$prop}: $var-output;
}

@function color-yiq($color, $dark: #222, $light: #fff) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);
  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;
  @if ($yiq >=128) {
    @return $dark;
  }
  @else {
    @return $light;
  }
}